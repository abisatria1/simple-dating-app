// Code generated by mockery v2.14.0. DO NOT EDIT.

package gorm

import (
	mock "github.com/stretchr/testify/mock"
	gorm_iogorm "gorm.io/gorm"
)

// MockTransaction is an autogenerated mock type for the Transaction type
type MockTransaction struct {
	mock.Mock
}

// Commit provides a mock function with given fields:
func (_m *MockTransaction) Commit() *gorm_iogorm.DB {
	ret := _m.Called()

	var r0 *gorm_iogorm.DB
	if rf, ok := ret.Get(0).(func() *gorm_iogorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm_iogorm.DB)
		}
	}

	return r0
}

// Rollback provides a mock function with given fields:
func (_m *MockTransaction) Rollback() *gorm_iogorm.DB {
	ret := _m.Called()

	var r0 *gorm_iogorm.DB
	if rf, ok := ret.Get(0).(func() *gorm_iogorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm_iogorm.DB)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockTransaction interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTransaction creates a new instance of MockTransaction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTransaction(t mockConstructorTestingTNewMockTransaction) *MockTransaction {
	mock := &MockTransaction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
